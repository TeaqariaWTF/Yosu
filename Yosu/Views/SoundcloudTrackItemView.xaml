<?xml version="1.0" encoding="utf-8" ?>
<Grid
    x:Class="Yosu.Views.SoundcloudTrackItemView"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:cm="https://github.com/jerry08/Plugin.ContextMenuContainer"
    xmlns:components="clr-namespace:Yosu.ViewModels.Components"
    xmlns:contextMenus="clr-namespace:Yosu.Views.ContextMenus"
    xmlns:controls="clr-namespace:Microsoft.Maui.Controls"
    xmlns:converters="clr-namespace:Yosu.Converters"
    xmlns:fi="clr-namespace:Yosu.FontIcons"
    xmlns:local="clr-namespace:Yosu.Views"
    xmlns:materialDesign="clr-namespace:MaterialDesign"
    xmlns:sc="clr-namespace:SoundCloudExplode.Track;assembly=SoundCloudExplode"
    xmlns:sdconverters="clr-namespace:Yosu.Converters.Soundcloud"
    xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    xmlns:viewmodels="clr-namespace:Yosu.ViewModels"
    xmlns:views="clr-namespace:Yosu.Views"
    xmlns:xct="clr-namespace:Plugin.MauiTouchEffect.Effects;assembly=Plugin.MauiTouchEffect"
    xmlns:yc="clr-namespace:Yosu.Controls"
    x:Name="this"
    x:DataType="components:SoundcloudDownloadViewModel">
    <!--  x:DataType="scsc:TrackInformation"  -->
    <Grid.Resources>
        <ResourceDictionary>
            <toolkit:InvertedBoolConverter x:Key="InvertedBoolConverter" />
            <converters:DownloadStatusToIsVisibileConverter x:Key="DownloadStatusToIsVisibileConverter" />
            <converters:DownloadStatusToProgressColorConverter x:Key="DownloadStatusToProgressColorConverter" />
            <converters:IntToKiloFormatConverter x:Key="IntToKiloFormatConverter" />
            <converters:MillisecondsToHumanReadableFormatConverter x:Key="MillisecondsToHumanReadableFormatConverter" />
            <converters:TimeSinceFormatConverter x:Key="TimeSinceFormatConverter" />
            <sdconverters:TrackToHighestQualityArtworkUrlConverter x:Key="TrackToHighestQualityArtworkUrlConverter" />
        </ResourceDictionary>
    </Grid.Resources>
    <Frame
        Margin="0"
        Padding="0"
        xct:TouchEffect.Command="{Binding BindingContext.OpenUrlCommand, Source={RelativeSource AncestorType={x:Type local:MainPage}}}"
        xct:TouchEffect.CommandParameter="{Binding .}"
        xct:TouchEffect.LongPressCommand="{Binding BindingContext.EnableMultiSelectWithParameterCommand, Source={RelativeSource AncestorType={x:Type local:MainPage}}}"
        xct:TouchEffect.LongPressCommandParameter="{Binding .}"
        xct:TouchEffect.NativeAnimation="True"
        BackgroundColor="Transparent"
        CornerRadius="0"
        Style="{StaticResource CollectionItem.Frame}">
        <Grid
            Margin="10"
            BackgroundColor="Transparent"
            ColumnDefinitions="auto,*,auto"
            HeightRequest="100"
            RowDefinitions="*,auto"
            RowSpacing="0">
            <Border
                Grid.Column="0"
                Margin="0"
                Padding="0"
                BackgroundColor="Transparent"
                HeightRequest="100"
                HorizontalOptions="FillAndExpand"
                StrokeThickness="0"
                VerticalOptions="FillAndExpand"
                WidthRequest="100">
                <Border.StrokeShape>
                    <RoundRectangle CornerRadius="4" />
                </Border.StrokeShape>
                <Image
                    Aspect="AspectFill"
                    BackgroundColor="Transparent"
                    Source="{Binding Track, Converter={StaticResource TrackToHighestQualityArtworkUrlConverter}}" />
            </Border>

            <StackLayout
                Grid.Column="1"
                Margin="12,0,0,0"
                Orientation="Vertical">
                <Label
                    FontAttributes="Bold"
                    LineBreakMode="TailTruncation"
                    MaxLines="2"
                    Text="{Binding Track.Title}" />
                <Label Text="{Binding Track.User.Username}" />
                <!--<HorizontalStackLayout>
                    <Label Text="{Binding Track.PlaybackCount, Converter={StaticResource IntToKiloFormatConverter}}" />
                    <Label Text=" • " />
                    <Label Text="{Binding Track.Duration, Converter={StaticResource MillisecondsToHumanReadableFormatConverter}}" />
                    <Label Text=" • " />
                    <Label Text="{Binding Track.DisplayDate, Converter={StaticResource TimeSinceFormatConverter}}" />
                </HorizontalStackLayout>-->
                <Label>
                    <Label.FormattedText>
                        <FormattedString>
                            <Span Text="{Binding Track.PlaybackCount, Converter={StaticResource IntToKiloFormatConverter}}" />
                            <Span Text=" • " />
                            <Span Text="{Binding Track.Duration, Converter={StaticResource MillisecondsToHumanReadableFormatConverter}}" />
                            <Span Text=" • " />
                            <Span Text="{Binding Track.DisplayDate, Converter={StaticResource TimeSinceFormatConverter}}" />
                        </FormattedString>
                    </Label.FormattedText>
                </Label>
            </StackLayout>

            <!--<cm:ContextMenuContainer
                x:Name="ActionsInlineMenu"
                Grid.Column="2"
                Margin="0"
                Padding="0"
                xct:TouchEffect.NativeAnimation="True"
                BackgroundColor="Transparent"
                HeightRequest="50"
                HorizontalOptions="FillAndExpand"
                VerticalOptions="Start"
                WidthRequest="50">
                <cm:ContextMenuContainer.MenuItems>
                    <cm:ContextMenuItem
                        Command="{Binding Parent.BindingContext.OpenUrlCommand, Source={x:Reference this}}"
                        CommandParameter="{Binding .}"
                        Text="Open" />
                    <cm:ContextMenuItem
                        Command="{Binding Parent.BindingContext.CopyUrlCommand, Source={x:Reference this}}"
                        CommandParameter="{Binding .}"
                        Text="Copy url" />
                    <cm:ContextMenuItem
                        Command="{Binding Parent.BindingContext.DownloadCommand, Source={x:Reference this}}"
                        CommandParameter="{Binding .}"
                        Text="Download" />
                </cm:ContextMenuContainer.MenuItems>
                <cm:ContextMenuContainer.Content>
                    <Border
                        Grid.Column="2"
                        Margin="0"
                        Padding="0"
                        xct:TouchEffect.Command="{Binding BindingContext.ShowContextMenuCommand, Source={RelativeSource AncestorType={x:Type views:MainPage}}}"
                        xct:TouchEffect.CommandParameter="{Binding ., Source={x:Reference ActionsInlineMenu}}"
                        xct:TouchEffect.NativeAnimation="True"
                        BackgroundColor="Transparent"
                        HeightRequest="50"
                        HorizontalOptions="FillAndExpand"
                        StrokeThickness="0"
                        VerticalOptions="Start"
                        WidthRequest="50">
                        <Border.StrokeShape>
                            <RoundRectangle CornerRadius="25" />
                        </Border.StrokeShape>
                        <Image HeightRequest="25">
                            <Image.Triggers>
                                <DataTrigger
                                    Binding="{Binding BindingContext.SelectionMode, Source={RelativeSource AncestorType={x:Type views:MainPage}}}"
                                    TargetType="Image"
                                    Value="Multiple">
                                    <Setter Property="IsVisible" Value="False" />
                                </DataTrigger>
                            </Image.Triggers>
                            <Image.Source>
                                <FontImageSource
                                    FontFamily="Material"
                                    Glyph="{x:Static materialDesign:MaterialDesignIcons.MoreVert}"
                                    Size="Large"
                                    Color="{AppThemeBinding Light={StaticResource Gray400},
                                                            Dark={StaticResource White}}" />
                            </Image.Source>
                        </Image>
                    </Border>
                </cm:ContextMenuContainer.Content>
            </cm:ContextMenuContainer>-->

            <!--  Only show when DownloadStatus is None, Canceled or Completed  -->
            <contextMenus:InitialContextMenu
                BindingContext="{Binding .}"
                IsVisible="{Binding CanShowInitialContextMenu}"
                Tag="{Binding Parent.BindingContext, Source={x:Reference this}}" />

            <!--  Only show while downloading (DownloadStatus is Started or Enqueued)  -->
            <contextMenus:DownloadingContextMenu
                BindingContext="{Binding .}"
                IsVisible="{Binding CanShowDownloadingContextMenu}"
                Tag="{Binding Parent.BindingContext, Source={x:Reference this}}" />

            <!--  Only show when download failed (DownloadStatus is Failed)  -->
            <contextMenus:DownloadFailedContextMenu
                BindingContext="{Binding .}"
                IsVisible="{Binding CanShowDownloadFailedContextMenu}"
                Tag="{Binding Parent.BindingContext, Source={x:Reference this}}" />

            <!--<ProgressBar Grid.Row="1" Grid.ColumnSpan="3" HeightRequest="5" />-->

            <!--<yc:ProgressBar
                x:Name="AnimatedProgressBar"
                Grid.Row="1"
                Grid.ColumnSpan="3"
                GradientColor="Orange"
                HeightRequest="3"
                IsIntermediate="{Binding IsProgressIndeterminate}"
                ProgressColor="Blue"
                UseGradient="True" />-->

            <yc:ProgressBar
                x:Name="AnimatedProgressBar"
                Grid.Row="1"
                Grid.ColumnSpan="3"
                HeightRequest="3"
                IsIntermediate="{Binding IsProgressIndeterminate}"
                IsVisible="{Binding Status, Converter={StaticResource DownloadStatusToIsVisibileConverter}}"
                Progress="{Binding PercentageProgress.Fraction}"
                ProgressColor="{Binding Status, Converter={StaticResource DownloadStatusToProgressColorConverter}}"
                UseGradient="False" />
        </Grid>
    </Frame>
    <VisualStateManager.VisualStateGroups>
        <VisualStateGroup Name="CommonStates">
            <VisualState Name="Normal" />
            <VisualState Name="Selected">
                <VisualState.Setters>
                    <Setter Property="BackgroundColor" Value="#ff7700" />
                </VisualState.Setters>
            </VisualState>
        </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
</Grid>